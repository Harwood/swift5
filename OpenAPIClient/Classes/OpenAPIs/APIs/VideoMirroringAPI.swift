//
// VideoMirroringAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class VideoMirroringAPI {

    /**
     Delete a mirror done on a video
     
     - parameter redundancyId: (path) id of an existing redundancy on a video 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func delMirroredVideo(redundancyId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return delMirroredVideoWithRequestBuilder(redundancyId: redundancyId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a mirror done on a video
     - DELETE /api/v1/server/redundancy/videos/{redundancyId}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter redundancyId: (path) id of an existing redundancy on a video 
     - returns: RequestBuilder<Void> 
     */
    open class func delMirroredVideoWithRequestBuilder(redundancyId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/server/redundancy/videos/{redundancyId}"
        let redundancyIdPreEscape = "\(APIHelper.mapValueToPathItem(redundancyId))"
        let redundancyIdPostEscape = redundancyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{redundancyId}", with: redundancyIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter target
     */
    public enum Target_getMirroredVideos: String, CaseIterable {
        case myVideos = "my-videos"
        case remoteVideos = "remote-videos"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getMirroredVideos: String, CaseIterable {
        case name = "name"
    }

    /**
     List videos being mirrored
     
     - parameter target: (query) direction of the mirror 
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort abuses by criteria (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMirroredVideos(target: Target_getMirroredVideos, start: Int? = nil, count: Int? = nil, sort: Sort_getMirroredVideos? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [VideoRedundancy]?, _ error: Error?) -> Void)) -> RequestTask {
        return getMirroredVideosWithRequestBuilder(target: target, start: start, count: count, sort: sort).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List videos being mirrored
     - GET /api/v1/server/redundancy/videos
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter target: (query) direction of the mirror 
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort abuses by criteria (optional)
     - returns: RequestBuilder<[VideoRedundancy]> 
     */
    open class func getMirroredVideosWithRequestBuilder(target: Target_getMirroredVideos, start: Int? = nil, count: Int? = nil, sort: Sort_getMirroredVideos? = nil) -> RequestBuilder<[VideoRedundancy]> {
        let localVariablePath = "/api/v1/server/redundancy/videos"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "target": (wrappedValue: target.encodeToJSON(), isExplode: true),
            "start": (wrappedValue: start?.encodeToJSON(), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[VideoRedundancy]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Mirror a video
     
     - parameter putMirroredVideoRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func putMirroredVideo(putMirroredVideoRequest: PutMirroredVideoRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return putMirroredVideoWithRequestBuilder(putMirroredVideoRequest: putMirroredVideoRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Mirror a video
     - POST /api/v1/server/redundancy/videos
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter putMirroredVideoRequest: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func putMirroredVideoWithRequestBuilder(putMirroredVideoRequest: PutMirroredVideoRequest? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v1/server/redundancy/videos"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: putMirroredVideoRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
