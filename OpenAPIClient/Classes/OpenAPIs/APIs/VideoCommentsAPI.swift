//
// VideoCommentsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class VideoCommentsAPI {

    /**
     * enum for parameter sort
     */
    public enum Sort_apiV1VideosIdCommentThreadsGet: String, CaseIterable {
        case createdat = "-createdAt"
        case totalreplies = "-totalReplies"
    }

    /**
     List threads of a video
     
     - parameter id: (path) The object id, uuid or short uuid 
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort comments by criteria (optional)
     - parameter xPeertubeVideoPassword: (header) Required on password protected video (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV1VideosIdCommentThreadsGet(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, start: Int? = nil, count: Int? = nil, sort: Sort_apiV1VideosIdCommentThreadsGet? = nil, xPeertubeVideoPassword: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CommentThreadResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV1VideosIdCommentThreadsGetWithRequestBuilder(id: id, start: start, count: count, sort: sort, xPeertubeVideoPassword: xPeertubeVideoPassword).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List threads of a video
     - GET /api/v1/videos/{id}/comment-threads
     - parameter id: (path) The object id, uuid or short uuid 
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort comments by criteria (optional)
     - parameter xPeertubeVideoPassword: (header) Required on password protected video (optional)
     - returns: RequestBuilder<CommentThreadResponse> 
     */
    open class func apiV1VideosIdCommentThreadsGetWithRequestBuilder(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, start: Int? = nil, count: Int? = nil, sort: Sort_apiV1VideosIdCommentThreadsGet? = nil, xPeertubeVideoPassword: String? = nil) -> RequestBuilder<CommentThreadResponse> {
        var localVariablePath = "/api/v1/videos/{id}/comment-threads"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "x-peertube-video-password": xPeertubeVideoPassword?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CommentThreadResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Create a thread
     
     - parameter id: (path) The object id, uuid or short uuid 
     - parameter apiV1VideosIdCommentThreadsPostRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV1VideosIdCommentThreadsPost(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, apiV1VideosIdCommentThreadsPostRequest: ApiV1VideosIdCommentThreadsPostRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CommentThreadPostResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV1VideosIdCommentThreadsPostWithRequestBuilder(id: id, apiV1VideosIdCommentThreadsPostRequest: apiV1VideosIdCommentThreadsPostRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a thread
     - POST /api/v1/videos/{id}/comment-threads
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (path) The object id, uuid or short uuid 
     - parameter apiV1VideosIdCommentThreadsPostRequest: (body)  (optional)
     - returns: RequestBuilder<CommentThreadPostResponse> 
     */
    open class func apiV1VideosIdCommentThreadsPostWithRequestBuilder(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, apiV1VideosIdCommentThreadsPostRequest: ApiV1VideosIdCommentThreadsPostRequest? = nil) -> RequestBuilder<CommentThreadPostResponse> {
        var localVariablePath = "/api/v1/videos/{id}/comment-threads"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: apiV1VideosIdCommentThreadsPostRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CommentThreadPostResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a thread
     
     - parameter id: (path) The object id, uuid or short uuid 
     - parameter threadId: (path) The thread id (root comment id) 
     - parameter xPeertubeVideoPassword: (header) Required on password protected video (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV1VideosIdCommentThreadsThreadIdGet(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, threadId: Int, xPeertubeVideoPassword: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: VideoCommentThreadTree?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV1VideosIdCommentThreadsThreadIdGetWithRequestBuilder(id: id, threadId: threadId, xPeertubeVideoPassword: xPeertubeVideoPassword).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a thread
     - GET /api/v1/videos/{id}/comment-threads/{threadId}
     - parameter id: (path) The object id, uuid or short uuid 
     - parameter threadId: (path) The thread id (root comment id) 
     - parameter xPeertubeVideoPassword: (header) Required on password protected video (optional)
     - returns: RequestBuilder<VideoCommentThreadTree> 
     */
    open class func apiV1VideosIdCommentThreadsThreadIdGetWithRequestBuilder(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, threadId: Int, xPeertubeVideoPassword: String? = nil) -> RequestBuilder<VideoCommentThreadTree> {
        var localVariablePath = "/api/v1/videos/{id}/comment-threads/{threadId}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let threadIdPreEscape = "\(APIHelper.mapValueToPathItem(threadId))"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{threadId}", with: threadIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "x-peertube-video-password": xPeertubeVideoPassword?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VideoCommentThreadTree>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Delete a comment or a reply
     
     - parameter id: (path) The object id, uuid or short uuid 
     - parameter commentId: (path) The comment id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV1VideosIdCommentsCommentIdDelete(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, commentId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV1VideosIdCommentsCommentIdDeleteWithRequestBuilder(id: id, commentId: commentId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a comment or a reply
     - DELETE /api/v1/videos/{id}/comments/{commentId}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (path) The object id, uuid or short uuid 
     - parameter commentId: (path) The comment id 
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1VideosIdCommentsCommentIdDeleteWithRequestBuilder(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, commentId: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/videos/{id}/comments/{commentId}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{commentId}", with: commentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Reply to a thread of a video
     
     - parameter id: (path) The object id, uuid or short uuid 
     - parameter commentId: (path) The comment id 
     - parameter xPeertubeVideoPassword: (header) Required on password protected video (optional)
     - parameter apiV1VideosIdCommentThreadsPostRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV1VideosIdCommentsCommentIdPost(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, commentId: Int, xPeertubeVideoPassword: String? = nil, apiV1VideosIdCommentThreadsPostRequest: ApiV1VideosIdCommentThreadsPostRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CommentThreadPostResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV1VideosIdCommentsCommentIdPostWithRequestBuilder(id: id, commentId: commentId, xPeertubeVideoPassword: xPeertubeVideoPassword, apiV1VideosIdCommentThreadsPostRequest: apiV1VideosIdCommentThreadsPostRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Reply to a thread of a video
     - POST /api/v1/videos/{id}/comments/{commentId}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (path) The object id, uuid or short uuid 
     - parameter commentId: (path) The comment id 
     - parameter xPeertubeVideoPassword: (header) Required on password protected video (optional)
     - parameter apiV1VideosIdCommentThreadsPostRequest: (body)  (optional)
     - returns: RequestBuilder<CommentThreadPostResponse> 
     */
    open class func apiV1VideosIdCommentsCommentIdPostWithRequestBuilder(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, commentId: Int, xPeertubeVideoPassword: String? = nil, apiV1VideosIdCommentThreadsPostRequest: ApiV1VideosIdCommentThreadsPostRequest? = nil) -> RequestBuilder<CommentThreadPostResponse> {
        var localVariablePath = "/api/v1/videos/{id}/comments/{commentId}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let commentIdPreEscape = "\(APIHelper.mapValueToPathItem(commentId))"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{commentId}", with: commentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: apiV1VideosIdCommentThreadsPostRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "x-peertube-video-password": xPeertubeVideoPassword?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CommentThreadPostResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
