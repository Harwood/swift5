//
// VideoBlocksAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class VideoBlocksAPI {

    /**
     Block a video
     
     - parameter id: (path) The object id, uuid or short uuid 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func addVideoBlock(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return addVideoBlockWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Block a video
     - POST /api/v1/videos/{id}/blacklist
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (path) The object id, uuid or short uuid 
     - returns: RequestBuilder<Void> 
     */
    open class func addVideoBlockWithRequestBuilder(id: ApiV1VideosOwnershipIdAcceptPostIdParameter) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/videos/{id}/blacklist"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Unblock a video by its id
     
     - parameter id: (path) The object id, uuid or short uuid 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func delVideoBlock(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return delVideoBlockWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Unblock a video by its id
     - DELETE /api/v1/videos/{id}/blacklist
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (path) The object id, uuid or short uuid 
     - returns: RequestBuilder<Void> 
     */
    open class func delVideoBlockWithRequestBuilder(id: ApiV1VideosOwnershipIdAcceptPostIdParameter) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/videos/{id}/blacklist"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getVideoBlocks: Int, CaseIterable {
        case _1 = 1
        case _2 = 2
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getVideoBlocks: String, CaseIterable {
        case id = "-id"
        case name = "name"
        case duration = "-duration"
        case views = "-views"
        case likes = "-likes"
        case dislikes = "-dislikes"
        case uuid = "-uuid"
        case createdat = "-createdAt"
    }

    /**
     List video blocks
     
     - parameter type: (query) list only blocks that match this type: - &#x60;1&#x60;: manual block - &#x60;2&#x60;: automatic block that needs review  (optional)
     - parameter search: (query) plain search that will match with video titles, and more (optional)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort blocklists by criteria (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getVideoBlocks(type: ModelType_getVideoBlocks? = nil, search: String? = nil, start: Int? = nil, count: Int? = nil, sort: Sort_getVideoBlocks? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetVideoBlocks200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getVideoBlocksWithRequestBuilder(type: type, search: search, start: start, count: count, sort: sort).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List video blocks
     - GET /api/v1/videos/blacklist
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter type: (query) list only blocks that match this type: - &#x60;1&#x60;: manual block - &#x60;2&#x60;: automatic block that needs review  (optional)
     - parameter search: (query) plain search that will match with video titles, and more (optional)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort blocklists by criteria (optional)
     - returns: RequestBuilder<GetVideoBlocks200Response> 
     */
    open class func getVideoBlocksWithRequestBuilder(type: ModelType_getVideoBlocks? = nil, search: String? = nil, start: Int? = nil, count: Int? = nil, sort: Sort_getVideoBlocks? = nil) -> RequestBuilder<GetVideoBlocks200Response> {
        let localVariablePath = "/api/v1/videos/blacklist"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "start": (wrappedValue: start?.encodeToJSON(), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetVideoBlocks200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
