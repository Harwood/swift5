//
// InstanceFollowsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class InstanceFollowsAPI {

    /**
     * enum for parameter state
     */
    public enum State_apiV1ServerFollowersGet: String, CaseIterable {
        case pending = "pending"
        case accepted = "accepted"
    }

    /**
     * enum for parameter actorType
     */
    public enum ActorType_apiV1ServerFollowersGet: String, CaseIterable {
        case person = "Person"
        case application = "Application"
        case group = "Group"
        case service = "Service"
        case organization = "Organization"
    }

    /**
     List instances following the server
     
     - parameter state: (query)  (optional)
     - parameter actorType: (query)  (optional)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort column (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV1ServerFollowersGet(state: State_apiV1ServerFollowersGet? = nil, actorType: ActorType_apiV1ServerFollowersGet? = nil, start: Int? = nil, count: Int? = nil, sort: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetAccountFollowers200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV1ServerFollowersGetWithRequestBuilder(state: state, actorType: actorType, start: start, count: count, sort: sort).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List instances following the server
     - GET /api/v1/server/followers
     - parameter state: (query)  (optional)
     - parameter actorType: (query)  (optional)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort column (optional)
     - returns: RequestBuilder<GetAccountFollowers200Response> 
     */
    open class func apiV1ServerFollowersGetWithRequestBuilder(state: State_apiV1ServerFollowersGet? = nil, actorType: ActorType_apiV1ServerFollowersGet? = nil, start: Int? = nil, count: Int? = nil, sort: String? = nil) -> RequestBuilder<GetAccountFollowers200Response> {
        let localVariablePath = "/api/v1/server/followers"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "state": (wrappedValue: state?.encodeToJSON(), isExplode: true),
            "actorType": (wrappedValue: actorType?.encodeToJSON(), isExplode: true),
            "start": (wrappedValue: start?.encodeToJSON(), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetAccountFollowers200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Accept a pending follower to your server
     
     - parameter nameWithHost: (path) The remote actor handle to remove from your followers 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV1ServerFollowersNameWithHostAcceptPost(nameWithHost: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV1ServerFollowersNameWithHostAcceptPostWithRequestBuilder(nameWithHost: nameWithHost).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Accept a pending follower to your server
     - POST /api/v1/server/followers/{nameWithHost}/accept
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter nameWithHost: (path) The remote actor handle to remove from your followers 
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1ServerFollowersNameWithHostAcceptPostWithRequestBuilder(nameWithHost: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/server/followers/{nameWithHost}/accept"
        let nameWithHostPreEscape = "\(APIHelper.mapValueToPathItem(nameWithHost))"
        let nameWithHostPostEscape = nameWithHostPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{nameWithHost}", with: nameWithHostPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Remove or reject a follower to your server
     
     - parameter nameWithHost: (path) The remote actor handle to remove from your followers 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV1ServerFollowersNameWithHostDelete(nameWithHost: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV1ServerFollowersNameWithHostDeleteWithRequestBuilder(nameWithHost: nameWithHost).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove or reject a follower to your server
     - DELETE /api/v1/server/followers/{nameWithHost}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter nameWithHost: (path) The remote actor handle to remove from your followers 
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1ServerFollowersNameWithHostDeleteWithRequestBuilder(nameWithHost: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/server/followers/{nameWithHost}"
        let nameWithHostPreEscape = "\(APIHelper.mapValueToPathItem(nameWithHost))"
        let nameWithHostPostEscape = nameWithHostPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{nameWithHost}", with: nameWithHostPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Reject a pending follower to your server
     
     - parameter nameWithHost: (path) The remote actor handle to remove from your followers 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV1ServerFollowersNameWithHostRejectPost(nameWithHost: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV1ServerFollowersNameWithHostRejectPostWithRequestBuilder(nameWithHost: nameWithHost).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Reject a pending follower to your server
     - POST /api/v1/server/followers/{nameWithHost}/reject
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter nameWithHost: (path) The remote actor handle to remove from your followers 
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1ServerFollowersNameWithHostRejectPostWithRequestBuilder(nameWithHost: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/server/followers/{nameWithHost}/reject"
        let nameWithHostPreEscape = "\(APIHelper.mapValueToPathItem(nameWithHost))"
        let nameWithHostPostEscape = nameWithHostPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{nameWithHost}", with: nameWithHostPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter state
     */
    public enum State_apiV1ServerFollowingGet: String, CaseIterable {
        case pending = "pending"
        case accepted = "accepted"
    }

    /**
     * enum for parameter actorType
     */
    public enum ActorType_apiV1ServerFollowingGet: String, CaseIterable {
        case person = "Person"
        case application = "Application"
        case group = "Group"
        case service = "Service"
        case organization = "Organization"
    }

    /**
     List instances followed by the server
     
     - parameter state: (query)  (optional)
     - parameter actorType: (query)  (optional)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort column (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV1ServerFollowingGet(state: State_apiV1ServerFollowingGet? = nil, actorType: ActorType_apiV1ServerFollowingGet? = nil, start: Int? = nil, count: Int? = nil, sort: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetAccountFollowers200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV1ServerFollowingGetWithRequestBuilder(state: state, actorType: actorType, start: start, count: count, sort: sort).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List instances followed by the server
     - GET /api/v1/server/following
     - parameter state: (query)  (optional)
     - parameter actorType: (query)  (optional)
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort column (optional)
     - returns: RequestBuilder<GetAccountFollowers200Response> 
     */
    open class func apiV1ServerFollowingGetWithRequestBuilder(state: State_apiV1ServerFollowingGet? = nil, actorType: ActorType_apiV1ServerFollowingGet? = nil, start: Int? = nil, count: Int? = nil, sort: String? = nil) -> RequestBuilder<GetAccountFollowers200Response> {
        let localVariablePath = "/api/v1/server/following"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "state": (wrappedValue: state?.encodeToJSON(), isExplode: true),
            "actorType": (wrappedValue: actorType?.encodeToJSON(), isExplode: true),
            "start": (wrappedValue: start?.encodeToJSON(), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetAccountFollowers200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Unfollow an actor (PeerTube instance, channel or account)
     
     - parameter hostOrHandle: (path) The hostOrHandle to unfollow 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV1ServerFollowingHostOrHandleDelete(hostOrHandle: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV1ServerFollowingHostOrHandleDeleteWithRequestBuilder(hostOrHandle: hostOrHandle).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Unfollow an actor (PeerTube instance, channel or account)
     - DELETE /api/v1/server/following/{hostOrHandle}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter hostOrHandle: (path) The hostOrHandle to unfollow 
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1ServerFollowingHostOrHandleDeleteWithRequestBuilder(hostOrHandle: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/server/following/{hostOrHandle}"
        let hostOrHandlePreEscape = "\(APIHelper.mapValueToPathItem(hostOrHandle))"
        let hostOrHandlePostEscape = hostOrHandlePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{hostOrHandle}", with: hostOrHandlePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Follow a list of actors (PeerTube instance, channel or account)
     
     - parameter apiV1ServerFollowingPostRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV1ServerFollowingPost(apiV1ServerFollowingPostRequest: ApiV1ServerFollowingPostRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV1ServerFollowingPostWithRequestBuilder(apiV1ServerFollowingPostRequest: apiV1ServerFollowingPostRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Follow a list of actors (PeerTube instance, channel or account)
     - POST /api/v1/server/following
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter apiV1ServerFollowingPostRequest: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1ServerFollowingPostWithRequestBuilder(apiV1ServerFollowingPostRequest: ApiV1ServerFollowingPostRequest? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/api/v1/server/following"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: apiV1ServerFollowingPostRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
