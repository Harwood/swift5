//
// VideoPlaylistsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class VideoPlaylistsAPI {

    /**
     Create a video playlist
     
     - parameter displayName: (form) Video playlist display name 
     - parameter thumbnailfile: (form) Video playlist thumbnail file (optional)
     - parameter privacy: (form)  (optional)
     - parameter description: (form) Video playlist description (optional)
     - parameter videoChannelId: (form)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func addPlaylist(displayName: String, thumbnailfile: URL? = nil, privacy: VideoPlaylistPrivacySet? = nil, description: String? = nil, videoChannelId: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AddPlaylist200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return addPlaylistWithRequestBuilder(displayName: displayName, thumbnailfile: thumbnailfile, privacy: privacy, description: description, videoChannelId: videoChannelId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a video playlist
     - POST /api/v1/video-playlists
     - If the video playlist is set as public, `videoChannelId` is mandatory.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter displayName: (form) Video playlist display name 
     - parameter thumbnailfile: (form) Video playlist thumbnail file (optional)
     - parameter privacy: (form)  (optional)
     - parameter description: (form) Video playlist description (optional)
     - parameter videoChannelId: (form)  (optional)
     - returns: RequestBuilder<AddPlaylist200Response> 
     */
    open class func addPlaylistWithRequestBuilder(displayName: String, thumbnailfile: URL? = nil, privacy: VideoPlaylistPrivacySet? = nil, description: String? = nil, videoChannelId: Int? = nil) -> RequestBuilder<AddPlaylist200Response> {
        let localVariablePath = "/api/v1/video-playlists"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "displayName": displayName.encodeToJSON(),
            "thumbnailfile": thumbnailfile?.encodeToJSON(),
            "privacy": privacy?.encodeToJSON(),
            "description": description?.encodeToJSON(),
            "videoChannelId": videoChannelId?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AddPlaylist200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Add a video in a playlist
     
     - parameter playlistId: (path) Playlist id 
     - parameter addVideoPlaylistVideoRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func addVideoPlaylistVideo(playlistId: Int, addVideoPlaylistVideoRequest: AddVideoPlaylistVideoRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AddVideoPlaylistVideo200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return addVideoPlaylistVideoWithRequestBuilder(playlistId: playlistId, addVideoPlaylistVideoRequest: addVideoPlaylistVideoRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add a video in a playlist
     - POST /api/v1/video-playlists/{playlistId}/videos
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter playlistId: (path) Playlist id 
     - parameter addVideoPlaylistVideoRequest: (body)  (optional)
     - returns: RequestBuilder<AddVideoPlaylistVideo200Response> 
     */
    open class func addVideoPlaylistVideoWithRequestBuilder(playlistId: Int, addVideoPlaylistVideoRequest: AddVideoPlaylistVideoRequest? = nil) -> RequestBuilder<AddVideoPlaylistVideo200Response> {
        var localVariablePath = "/api/v1/video-playlists/{playlistId}/videos"
        let playlistIdPreEscape = "\(APIHelper.mapValueToPathItem(playlistId))"
        let playlistIdPostEscape = playlistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playlistId}", with: playlistIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addVideoPlaylistVideoRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AddVideoPlaylistVideo200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List playlists of an account
     
     - parameter name: (path) The username or handle of the account 
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort column (optional)
     - parameter search: (query) Plain text search, applied to various parts of the model depending on endpoint (optional)
     - parameter playlistType: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV1AccountsNameVideoPlaylistsGet(name: String, start: Int? = nil, count: Int? = nil, sort: String? = nil, search: String? = nil, playlistType: VideoPlaylistTypeSet? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV1AccountsNameVideoPlaylistsGetWithRequestBuilder(name: name, start: start, count: count, sort: sort, search: search, playlistType: playlistType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List playlists of an account
     - GET /api/v1/accounts/{name}/video-playlists
     - parameter name: (path) The username or handle of the account 
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort column (optional)
     - parameter search: (query) Plain text search, applied to various parts of the model depending on endpoint (optional)
     - parameter playlistType: (query)  (optional)
     - returns: RequestBuilder<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response> 
     */
    open class func apiV1AccountsNameVideoPlaylistsGetWithRequestBuilder(name: String, start: Int? = nil, count: Int? = nil, sort: String? = nil, search: String? = nil, playlistType: VideoPlaylistTypeSet? = nil) -> RequestBuilder<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response> {
        var localVariablePath = "/api/v1/accounts/{name}/video-playlists"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "playlistType": (wrappedValue: playlistType?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Check video exists in my playlists
     
     - parameter videoIds: (query) The video ids to check 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV1UsersMeVideoPlaylistsVideosExistGet(videoIds: [Int], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ApiV1UsersMeVideoPlaylistsVideosExistGet200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV1UsersMeVideoPlaylistsVideosExistGetWithRequestBuilder(videoIds: videoIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Check video exists in my playlists
     - GET /api/v1/users/me/video-playlists/videos-exist
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter videoIds: (query) The video ids to check 
     - returns: RequestBuilder<ApiV1UsersMeVideoPlaylistsVideosExistGet200Response> 
     */
    open class func apiV1UsersMeVideoPlaylistsVideosExistGetWithRequestBuilder(videoIds: [Int]) -> RequestBuilder<ApiV1UsersMeVideoPlaylistsVideosExistGet200Response> {
        let localVariablePath = "/api/v1/users/me/video-playlists/videos-exist"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "videoIds": (wrappedValue: videoIds.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiV1UsersMeVideoPlaylistsVideosExistGet200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List playlists of a channel
     
     - parameter channelHandle: (path) The video channel handle 
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort column (optional)
     - parameter playlistType: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV1VideoChannelsChannelHandleVideoPlaylistsGet(channelHandle: String, start: Int? = nil, count: Int? = nil, sort: String? = nil, playlistType: VideoPlaylistTypeSet? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV1VideoChannelsChannelHandleVideoPlaylistsGetWithRequestBuilder(channelHandle: channelHandle, start: start, count: count, sort: sort, playlistType: playlistType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List playlists of a channel
     - GET /api/v1/video-channels/{channelHandle}/video-playlists
     - parameter channelHandle: (path) The video channel handle 
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort column (optional)
     - parameter playlistType: (query)  (optional)
     - returns: RequestBuilder<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response> 
     */
    open class func apiV1VideoChannelsChannelHandleVideoPlaylistsGetWithRequestBuilder(channelHandle: String, start: Int? = nil, count: Int? = nil, sort: String? = nil, playlistType: VideoPlaylistTypeSet? = nil) -> RequestBuilder<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response> {
        var localVariablePath = "/api/v1/video-channels/{channelHandle}/video-playlists"
        let channelHandlePreEscape = "\(APIHelper.mapValueToPathItem(channelHandle))"
        let channelHandlePostEscape = channelHandlePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{channelHandle}", with: channelHandlePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
            "playlistType": (wrappedValue: playlistType?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Delete a video playlist
     
     - parameter playlistId: (path) Playlist id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV1VideoPlaylistsPlaylistIdDelete(playlistId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV1VideoPlaylistsPlaylistIdDeleteWithRequestBuilder(playlistId: playlistId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a video playlist
     - DELETE /api/v1/video-playlists/{playlistId}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter playlistId: (path) Playlist id 
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1VideoPlaylistsPlaylistIdDeleteWithRequestBuilder(playlistId: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/video-playlists/{playlistId}"
        let playlistIdPreEscape = "\(APIHelper.mapValueToPathItem(playlistId))"
        let playlistIdPostEscape = playlistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playlistId}", with: playlistIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a video playlist
     
     - parameter playlistId: (path) Playlist id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV1VideoPlaylistsPlaylistIdGet(playlistId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: VideoPlaylist?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV1VideoPlaylistsPlaylistIdGetWithRequestBuilder(playlistId: playlistId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a video playlist
     - GET /api/v1/video-playlists/{playlistId}
     - parameter playlistId: (path) Playlist id 
     - returns: RequestBuilder<VideoPlaylist> 
     */
    open class func apiV1VideoPlaylistsPlaylistIdGetWithRequestBuilder(playlistId: Int) -> RequestBuilder<VideoPlaylist> {
        var localVariablePath = "/api/v1/video-playlists/{playlistId}"
        let playlistIdPreEscape = "\(APIHelper.mapValueToPathItem(playlistId))"
        let playlistIdPostEscape = playlistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playlistId}", with: playlistIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VideoPlaylist>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update a video playlist
     
     - parameter playlistId: (path) Playlist id 
     - parameter displayName: (form) Video playlist display name (optional)
     - parameter thumbnailfile: (form) Video playlist thumbnail file (optional)
     - parameter privacy: (form)  (optional)
     - parameter description: (form) Video playlist description (optional)
     - parameter videoChannelId: (form)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV1VideoPlaylistsPlaylistIdPut(playlistId: Int, displayName: String? = nil, thumbnailfile: URL? = nil, privacy: VideoPlaylistPrivacySet? = nil, description: String? = nil, videoChannelId: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV1VideoPlaylistsPlaylistIdPutWithRequestBuilder(playlistId: playlistId, displayName: displayName, thumbnailfile: thumbnailfile, privacy: privacy, description: description, videoChannelId: videoChannelId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a video playlist
     - PUT /api/v1/video-playlists/{playlistId}
     - If the video playlist is set as public, the playlist must have a assigned channel.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter playlistId: (path) Playlist id 
     - parameter displayName: (form) Video playlist display name (optional)
     - parameter thumbnailfile: (form) Video playlist thumbnail file (optional)
     - parameter privacy: (form)  (optional)
     - parameter description: (form) Video playlist description (optional)
     - parameter videoChannelId: (form)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1VideoPlaylistsPlaylistIdPutWithRequestBuilder(playlistId: Int, displayName: String? = nil, thumbnailfile: URL? = nil, privacy: VideoPlaylistPrivacySet? = nil, description: String? = nil, videoChannelId: Int? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/video-playlists/{playlistId}"
        let playlistIdPreEscape = "\(APIHelper.mapValueToPathItem(playlistId))"
        let playlistIdPostEscape = playlistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playlistId}", with: playlistIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "displayName": displayName?.encodeToJSON(),
            "thumbnailfile": thumbnailfile?.encodeToJSON(),
            "privacy": privacy?.encodeToJSON(),
            "description": description?.encodeToJSON(),
            "videoChannelId": videoChannelId?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete an element from a playlist
     
     - parameter playlistId: (path) Playlist id 
     - parameter playlistElementId: (path) Playlist element id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func delVideoPlaylistVideo(playlistId: Int, playlistElementId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return delVideoPlaylistVideoWithRequestBuilder(playlistId: playlistId, playlistElementId: playlistElementId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an element from a playlist
     - DELETE /api/v1/video-playlists/{playlistId}/videos/{playlistElementId}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter playlistId: (path) Playlist id 
     - parameter playlistElementId: (path) Playlist element id 
     - returns: RequestBuilder<Void> 
     */
    open class func delVideoPlaylistVideoWithRequestBuilder(playlistId: Int, playlistElementId: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/video-playlists/{playlistId}/videos/{playlistElementId}"
        let playlistIdPreEscape = "\(APIHelper.mapValueToPathItem(playlistId))"
        let playlistIdPostEscape = playlistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playlistId}", with: playlistIdPostEscape, options: .literal, range: nil)
        let playlistElementIdPreEscape = "\(APIHelper.mapValueToPathItem(playlistElementId))"
        let playlistElementIdPostEscape = playlistElementIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playlistElementId}", with: playlistElementIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List available playlist privacy policies
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPlaylistPrivacyPolicies(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [String]?, _ error: Error?) -> Void)) -> RequestTask {
        return getPlaylistPrivacyPoliciesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List available playlist privacy policies
     - GET /api/v1/video-playlists/privacies
     - returns: RequestBuilder<[String]> 
     */
    open class func getPlaylistPrivacyPoliciesWithRequestBuilder() -> RequestBuilder<[String]> {
        let localVariablePath = "/api/v1/video-playlists/privacies"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     List video playlists
     
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort column (optional)
     - parameter playlistType: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPlaylists(start: Int? = nil, count: Int? = nil, sort: String? = nil, playlistType: VideoPlaylistTypeSet? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getPlaylistsWithRequestBuilder(start: start, count: count, sort: sort, playlistType: playlistType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List video playlists
     - GET /api/v1/video-playlists
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort column (optional)
     - parameter playlistType: (query)  (optional)
     - returns: RequestBuilder<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response> 
     */
    open class func getPlaylistsWithRequestBuilder(start: Int? = nil, count: Int? = nil, sort: String? = nil, playlistType: VideoPlaylistTypeSet? = nil) -> RequestBuilder<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response> {
        let localVariablePath = "/api/v1/video-playlists"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
            "playlistType": (wrappedValue: playlistType?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     List videos of a playlist
     
     - parameter playlistId: (path) Playlist id 
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getVideoPlaylistVideos(playlistId: Int, start: Int? = nil, count: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: VideoListResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getVideoPlaylistVideosWithRequestBuilder(playlistId: playlistId, start: start, count: count).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List videos of a playlist
     - GET /api/v1/video-playlists/{playlistId}/videos
     - parameter playlistId: (path) Playlist id 
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - returns: RequestBuilder<VideoListResponse> 
     */
    open class func getVideoPlaylistVideosWithRequestBuilder(playlistId: Int, start: Int? = nil, count: Int? = nil) -> RequestBuilder<VideoListResponse> {
        var localVariablePath = "/api/v1/video-playlists/{playlistId}/videos"
        let playlistIdPreEscape = "\(APIHelper.mapValueToPathItem(playlistId))"
        let playlistIdPostEscape = playlistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playlistId}", with: playlistIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VideoListResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update a playlist element
     
     - parameter playlistId: (path) Playlist id 
     - parameter playlistElementId: (path) Playlist element id 
     - parameter putVideoPlaylistVideoRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func putVideoPlaylistVideo(playlistId: Int, playlistElementId: Int, putVideoPlaylistVideoRequest: PutVideoPlaylistVideoRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return putVideoPlaylistVideoWithRequestBuilder(playlistId: playlistId, playlistElementId: playlistElementId, putVideoPlaylistVideoRequest: putVideoPlaylistVideoRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a playlist element
     - PUT /api/v1/video-playlists/{playlistId}/videos/{playlistElementId}
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter playlistId: (path) Playlist id 
     - parameter playlistElementId: (path) Playlist element id 
     - parameter putVideoPlaylistVideoRequest: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func putVideoPlaylistVideoWithRequestBuilder(playlistId: Int, playlistElementId: Int, putVideoPlaylistVideoRequest: PutVideoPlaylistVideoRequest? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/video-playlists/{playlistId}/videos/{playlistElementId}"
        let playlistIdPreEscape = "\(APIHelper.mapValueToPathItem(playlistId))"
        let playlistIdPostEscape = playlistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playlistId}", with: playlistIdPostEscape, options: .literal, range: nil)
        let playlistElementIdPreEscape = "\(APIHelper.mapValueToPathItem(playlistElementId))"
        let playlistElementIdPostEscape = playlistElementIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playlistElementId}", with: playlistElementIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: putVideoPlaylistVideoRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Reorder a playlist
     
     - parameter playlistId: (path) Playlist id 
     - parameter reorderVideoPlaylistRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func reorderVideoPlaylist(playlistId: Int, reorderVideoPlaylistRequest: ReorderVideoPlaylistRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return reorderVideoPlaylistWithRequestBuilder(playlistId: playlistId, reorderVideoPlaylistRequest: reorderVideoPlaylistRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Reorder a playlist
     - POST /api/v1/video-playlists/{playlistId}/videos/reorder
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter playlistId: (path) Playlist id 
     - parameter reorderVideoPlaylistRequest: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reorderVideoPlaylistWithRequestBuilder(playlistId: Int, reorderVideoPlaylistRequest: ReorderVideoPlaylistRequest? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/video-playlists/{playlistId}/videos/reorder"
        let playlistIdPreEscape = "\(APIHelper.mapValueToPathItem(playlistId))"
        let playlistIdPostEscape = playlistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playlistId}", with: playlistIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: reorderVideoPlaylistRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
