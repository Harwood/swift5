//
// RunnerJobsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class RunnerJobsAPI {

    /**
     * enum for parameter sort
     */
    public enum Sort_apiV1RunnersJobsGet: String, CaseIterable {
        case updatedat = "updatedAt"
        case createdat = "createdAt"
        case priority = "priority"
        case state = "state"
        case progress = "progress"
    }

    /**
     List jobs
     
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort runner jobs by criteria (optional)
     - parameter search: (query) Plain text search, applied to various parts of the model depending on endpoint (optional)
     - parameter stateOneOf: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV1RunnersJobsGet(start: Int? = nil, count: Int? = nil, sort: Sort_apiV1RunnersJobsGet? = nil, search: String? = nil, stateOneOf: [RunnerJobState]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ApiV1RunnersJobsGet200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV1RunnersJobsGetWithRequestBuilder(start: start, count: count, sort: sort, search: search, stateOneOf: stateOneOf).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List jobs
     - GET /api/v1/runners/jobs
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter start: (query) Offset used to paginate results (optional)
     - parameter count: (query) Number of items to return (optional, default to 15)
     - parameter sort: (query) Sort runner jobs by criteria (optional)
     - parameter search: (query) Plain text search, applied to various parts of the model depending on endpoint (optional)
     - parameter stateOneOf: (query)  (optional)
     - returns: RequestBuilder<ApiV1RunnersJobsGet200Response> 
     */
    open class func apiV1RunnersJobsGetWithRequestBuilder(start: Int? = nil, count: Int? = nil, sort: Sort_apiV1RunnersJobsGet? = nil, search: String? = nil, stateOneOf: [RunnerJobState]? = nil) -> RequestBuilder<ApiV1RunnersJobsGet200Response> {
        let localVariablePath = "/api/v1/runners/jobs"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
            "stateOneOf": (wrappedValue: stateOneOf?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiV1RunnersJobsGet200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Abort job
     
     - parameter jobUUID: (path)  
     - parameter apiV1RunnersJobsJobUUIDAbortPostRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV1RunnersJobsJobUUIDAbortPost(jobUUID: UUID, apiV1RunnersJobsJobUUIDAbortPostRequest: ApiV1RunnersJobsJobUUIDAbortPostRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV1RunnersJobsJobUUIDAbortPostWithRequestBuilder(jobUUID: jobUUID, apiV1RunnersJobsJobUUIDAbortPostRequest: apiV1RunnersJobsJobUUIDAbortPostRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Abort job
     - POST /api/v1/runners/jobs/{jobUUID}/abort
     - API used by PeerTube runners
     - parameter jobUUID: (path)  
     - parameter apiV1RunnersJobsJobUUIDAbortPostRequest: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1RunnersJobsJobUUIDAbortPostWithRequestBuilder(jobUUID: UUID, apiV1RunnersJobsJobUUIDAbortPostRequest: ApiV1RunnersJobsJobUUIDAbortPostRequest? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/runners/jobs/{jobUUID}/abort"
        let jobUUIDPreEscape = "\(APIHelper.mapValueToPathItem(jobUUID))"
        let jobUUIDPostEscape = jobUUIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{jobUUID}", with: jobUUIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: apiV1RunnersJobsJobUUIDAbortPostRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Accept job
     
     - parameter jobUUID: (path)  
     - parameter apiV1RunnersUnregisterPostRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV1RunnersJobsJobUUIDAcceptPost(jobUUID: UUID, apiV1RunnersUnregisterPostRequest: ApiV1RunnersUnregisterPostRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ApiV1RunnersJobsJobUUIDAcceptPost200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV1RunnersJobsJobUUIDAcceptPostWithRequestBuilder(jobUUID: jobUUID, apiV1RunnersUnregisterPostRequest: apiV1RunnersUnregisterPostRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Accept job
     - POST /api/v1/runners/jobs/{jobUUID}/accept
     - API used by PeerTube runners
     - parameter jobUUID: (path)  
     - parameter apiV1RunnersUnregisterPostRequest: (body)  (optional)
     - returns: RequestBuilder<ApiV1RunnersJobsJobUUIDAcceptPost200Response> 
     */
    open class func apiV1RunnersJobsJobUUIDAcceptPostWithRequestBuilder(jobUUID: UUID, apiV1RunnersUnregisterPostRequest: ApiV1RunnersUnregisterPostRequest? = nil) -> RequestBuilder<ApiV1RunnersJobsJobUUIDAcceptPost200Response> {
        var localVariablePath = "/api/v1/runners/jobs/{jobUUID}/accept"
        let jobUUIDPreEscape = "\(APIHelper.mapValueToPathItem(jobUUID))"
        let jobUUIDPostEscape = jobUUIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{jobUUID}", with: jobUUIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: apiV1RunnersUnregisterPostRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiV1RunnersJobsJobUUIDAcceptPost200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Cancel a job
     
     - parameter jobUUID: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV1RunnersJobsJobUUIDCancelGet(jobUUID: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV1RunnersJobsJobUUIDCancelGetWithRequestBuilder(jobUUID: jobUUID).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Cancel a job
     - GET /api/v1/runners/jobs/{jobUUID}/cancel
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter jobUUID: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1RunnersJobsJobUUIDCancelGetWithRequestBuilder(jobUUID: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/runners/jobs/{jobUUID}/cancel"
        let jobUUIDPreEscape = "\(APIHelper.mapValueToPathItem(jobUUID))"
        let jobUUIDPostEscape = jobUUIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{jobUUID}", with: jobUUIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete a job
     
     - parameter jobUUID: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV1RunnersJobsJobUUIDDelete(jobUUID: UUID, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV1RunnersJobsJobUUIDDeleteWithRequestBuilder(jobUUID: jobUUID).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a job
     - DELETE /api/v1/runners/jobs/{jobUUID}
     - The endpoint will first cancel the job if needed, and then remove it from the database. Children jobs will also be removed
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter jobUUID: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1RunnersJobsJobUUIDDeleteWithRequestBuilder(jobUUID: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/runners/jobs/{jobUUID}"
        let jobUUIDPreEscape = "\(APIHelper.mapValueToPathItem(jobUUID))"
        let jobUUIDPostEscape = jobUUIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{jobUUID}", with: jobUUIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Post job error
     
     - parameter jobUUID: (path)  
     - parameter apiV1RunnersJobsJobUUIDErrorPostRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV1RunnersJobsJobUUIDErrorPost(jobUUID: UUID, apiV1RunnersJobsJobUUIDErrorPostRequest: ApiV1RunnersJobsJobUUIDErrorPostRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV1RunnersJobsJobUUIDErrorPostWithRequestBuilder(jobUUID: jobUUID, apiV1RunnersJobsJobUUIDErrorPostRequest: apiV1RunnersJobsJobUUIDErrorPostRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Post job error
     - POST /api/v1/runners/jobs/{jobUUID}/error
     - API used by PeerTube runners
     - parameter jobUUID: (path)  
     - parameter apiV1RunnersJobsJobUUIDErrorPostRequest: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1RunnersJobsJobUUIDErrorPostWithRequestBuilder(jobUUID: UUID, apiV1RunnersJobsJobUUIDErrorPostRequest: ApiV1RunnersJobsJobUUIDErrorPostRequest? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/runners/jobs/{jobUUID}/error"
        let jobUUIDPreEscape = "\(APIHelper.mapValueToPathItem(jobUUID))"
        let jobUUIDPostEscape = jobUUIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{jobUUID}", with: jobUUIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: apiV1RunnersJobsJobUUIDErrorPostRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Post job success
     
     - parameter jobUUID: (path)  
     - parameter apiV1RunnersJobsJobUUIDSuccessPostRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV1RunnersJobsJobUUIDSuccessPost(jobUUID: UUID, apiV1RunnersJobsJobUUIDSuccessPostRequest: ApiV1RunnersJobsJobUUIDSuccessPostRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV1RunnersJobsJobUUIDSuccessPostWithRequestBuilder(jobUUID: jobUUID, apiV1RunnersJobsJobUUIDSuccessPostRequest: apiV1RunnersJobsJobUUIDSuccessPostRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Post job success
     - POST /api/v1/runners/jobs/{jobUUID}/success
     - API used by PeerTube runners
     - parameter jobUUID: (path)  
     - parameter apiV1RunnersJobsJobUUIDSuccessPostRequest: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1RunnersJobsJobUUIDSuccessPostWithRequestBuilder(jobUUID: UUID, apiV1RunnersJobsJobUUIDSuccessPostRequest: ApiV1RunnersJobsJobUUIDSuccessPostRequest? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/runners/jobs/{jobUUID}/success"
        let jobUUIDPreEscape = "\(APIHelper.mapValueToPathItem(jobUUID))"
        let jobUUIDPostEscape = jobUUIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{jobUUID}", with: jobUUIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: apiV1RunnersJobsJobUUIDSuccessPostRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update job
     
     - parameter jobUUID: (path)  
     - parameter apiV1RunnersJobsJobUUIDUpdatePostRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV1RunnersJobsJobUUIDUpdatePost(jobUUID: UUID, apiV1RunnersJobsJobUUIDUpdatePostRequest: ApiV1RunnersJobsJobUUIDUpdatePostRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV1RunnersJobsJobUUIDUpdatePostWithRequestBuilder(jobUUID: jobUUID, apiV1RunnersJobsJobUUIDUpdatePostRequest: apiV1RunnersJobsJobUUIDUpdatePostRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update job
     - POST /api/v1/runners/jobs/{jobUUID}/update
     - API used by PeerTube runners
     - parameter jobUUID: (path)  
     - parameter apiV1RunnersJobsJobUUIDUpdatePostRequest: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func apiV1RunnersJobsJobUUIDUpdatePostWithRequestBuilder(jobUUID: UUID, apiV1RunnersJobsJobUUIDUpdatePostRequest: ApiV1RunnersJobsJobUUIDUpdatePostRequest? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v1/runners/jobs/{jobUUID}/update"
        let jobUUIDPreEscape = "\(APIHelper.mapValueToPathItem(jobUUID))"
        let jobUUIDPostEscape = jobUUIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{jobUUID}", with: jobUUIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: apiV1RunnersJobsJobUUIDUpdatePostRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Request a new job
     
     - parameter apiV1RunnersUnregisterPostRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiV1RunnersJobsRequestPost(apiV1RunnersUnregisterPostRequest: ApiV1RunnersUnregisterPostRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ApiV1RunnersJobsRequestPost200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return apiV1RunnersJobsRequestPostWithRequestBuilder(apiV1RunnersUnregisterPostRequest: apiV1RunnersUnregisterPostRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Request a new job
     - POST /api/v1/runners/jobs/request
     - API used by PeerTube runners
     - parameter apiV1RunnersUnregisterPostRequest: (body)  (optional)
     - returns: RequestBuilder<ApiV1RunnersJobsRequestPost200Response> 
     */
    open class func apiV1RunnersJobsRequestPostWithRequestBuilder(apiV1RunnersUnregisterPostRequest: ApiV1RunnersUnregisterPostRequest? = nil) -> RequestBuilder<ApiV1RunnersJobsRequestPost200Response> {
        let localVariablePath = "/api/v1/runners/jobs/request"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: apiV1RunnersUnregisterPostRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiV1RunnersJobsRequestPost200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
