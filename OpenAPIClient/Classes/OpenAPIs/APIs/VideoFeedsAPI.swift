//
// VideoFeedsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class VideoFeedsAPI {

    /**
     * enum for parameter format
     */
    public enum Format_getSyndicatedComments: String, CaseIterable {
        case xml = "xml"
        case rss = "rss"
        case rss2 = "rss2"
        case atom = "atom"
        case atom1 = "atom1"
        case json = "json"
        case json1 = "json1"
    }

    /**
     Comments on videos feeds
     
     - parameter format: (path) format expected (we focus on making &#x60;rss&#x60; the most featureful ; it serves [Media RSS](https://www.rssboard.org/media-rss)) 
     - parameter videoId: (query) limit listing to a specific video (optional)
     - parameter accountId: (query) limit listing to a specific account (optional)
     - parameter accountName: (query) limit listing to a specific account (optional)
     - parameter videoChannelId: (query) limit listing to a specific video channel (optional)
     - parameter videoChannelName: (query) limit listing to a specific video channel (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getSyndicatedComments(format: Format_getSyndicatedComments, videoId: String? = nil, accountId: String? = nil, accountName: String? = nil, videoChannelId: String? = nil, videoChannelName: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [VideoCommentsForXMLInner]?, _ error: Error?) -> Void)) -> RequestTask {
        return getSyndicatedCommentsWithRequestBuilder(format: format, videoId: videoId, accountId: accountId, accountName: accountName, videoChannelId: videoChannelId, videoChannelName: videoChannelName).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Comments on videos feeds
     - GET /feeds/video-comments.{format}
     - responseHeaders: [Cache-Control(String)]
     - parameter format: (path) format expected (we focus on making &#x60;rss&#x60; the most featureful ; it serves [Media RSS](https://www.rssboard.org/media-rss)) 
     - parameter videoId: (query) limit listing to a specific video (optional)
     - parameter accountId: (query) limit listing to a specific account (optional)
     - parameter accountName: (query) limit listing to a specific account (optional)
     - parameter videoChannelId: (query) limit listing to a specific video channel (optional)
     - parameter videoChannelName: (query) limit listing to a specific video channel (optional)
     - returns: RequestBuilder<[VideoCommentsForXMLInner]> 
     */
    open class func getSyndicatedCommentsWithRequestBuilder(format: Format_getSyndicatedComments, videoId: String? = nil, accountId: String? = nil, accountName: String? = nil, videoChannelId: String? = nil, videoChannelName: String? = nil) -> RequestBuilder<[VideoCommentsForXMLInner]> {
        var localVariablePath = "/feeds/video-comments.{format}"
        let formatPreEscape = "\(format.rawValue)"
        let formatPostEscape = formatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{format}", with: formatPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "videoId": (wrappedValue: videoId?.encodeToJSON(), isExplode: true),
            "accountId": (wrappedValue: accountId?.encodeToJSON(), isExplode: true),
            "accountName": (wrappedValue: accountName?.encodeToJSON(), isExplode: true),
            "videoChannelId": (wrappedValue: videoChannelId?.encodeToJSON(), isExplode: true),
            "videoChannelName": (wrappedValue: videoChannelName?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[VideoCommentsForXMLInner]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter format
     */
    public enum Format_getSyndicatedSubscriptionVideos: String, CaseIterable {
        case xml = "xml"
        case rss = "rss"
        case rss2 = "rss2"
        case atom = "atom"
        case atom1 = "atom1"
        case json = "json"
        case json1 = "json1"
    }

    /**
     * enum for parameter nsfw
     */
    public enum Nsfw_getSyndicatedSubscriptionVideos: String, CaseIterable {
        case _true = "true"
        case _false = "false"
    }

    /**
     * enum for parameter include
     */
    public enum Include_getSyndicatedSubscriptionVideos: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _4 = 4
        case _8 = 8
    }

    /**
     Videos of subscriptions feeds
     
     - parameter format: (path) format expected (we focus on making &#x60;rss&#x60; the most featureful ; it serves [Media RSS](https://www.rssboard.org/media-rss)) 
     - parameter accountId: (query) limit listing to a specific account 
     - parameter token: (query) private token allowing access 
     - parameter sort: (query) Sort column (optional)
     - parameter nsfw: (query) whether to include nsfw videos, if any (optional)
     - parameter isLocal: (query) **PeerTube &gt;&#x3D; 4.0** Display only local or remote videos (optional)
     - parameter include: (query) **PeerTube &gt;&#x3D; 4.0** Include additional videos in results (can be combined using bitwise or operator) - &#x60;0&#x60; NONE - &#x60;1&#x60; NOT_PUBLISHED_STATE - &#x60;2&#x60; BLACKLISTED - &#x60;4&#x60; BLOCKED_OWNER - &#x60;8&#x60; FILES  (optional)
     - parameter privacyOneOf: (query) **PeerTube &gt;&#x3D; 4.0** Display only videos in this specific privacy/privacies (optional)
     - parameter hasHLSFiles: (query) **PeerTube &gt;&#x3D; 4.0** Display only videos that have HLS files (optional)
     - parameter hasWebVideoFiles: (query) **PeerTube &gt;&#x3D; 6.0** Display only videos that have Web Video files (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getSyndicatedSubscriptionVideos(format: Format_getSyndicatedSubscriptionVideos, accountId: String, token: String, sort: String? = nil, nsfw: Nsfw_getSyndicatedSubscriptionVideos? = nil, isLocal: Bool? = nil, include: Include_getSyndicatedSubscriptionVideos? = nil, privacyOneOf: VideoPrivacySet? = nil, hasHLSFiles: Bool? = nil, hasWebVideoFiles: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [VideosForXMLInner]?, _ error: Error?) -> Void)) -> RequestTask {
        return getSyndicatedSubscriptionVideosWithRequestBuilder(format: format, accountId: accountId, token: token, sort: sort, nsfw: nsfw, isLocal: isLocal, include: include, privacyOneOf: privacyOneOf, hasHLSFiles: hasHLSFiles, hasWebVideoFiles: hasWebVideoFiles).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Videos of subscriptions feeds
     - GET /feeds/subscriptions.{format}
     - responseHeaders: [Cache-Control(String)]
     - parameter format: (path) format expected (we focus on making &#x60;rss&#x60; the most featureful ; it serves [Media RSS](https://www.rssboard.org/media-rss)) 
     - parameter accountId: (query) limit listing to a specific account 
     - parameter token: (query) private token allowing access 
     - parameter sort: (query) Sort column (optional)
     - parameter nsfw: (query) whether to include nsfw videos, if any (optional)
     - parameter isLocal: (query) **PeerTube &gt;&#x3D; 4.0** Display only local or remote videos (optional)
     - parameter include: (query) **PeerTube &gt;&#x3D; 4.0** Include additional videos in results (can be combined using bitwise or operator) - &#x60;0&#x60; NONE - &#x60;1&#x60; NOT_PUBLISHED_STATE - &#x60;2&#x60; BLACKLISTED - &#x60;4&#x60; BLOCKED_OWNER - &#x60;8&#x60; FILES  (optional)
     - parameter privacyOneOf: (query) **PeerTube &gt;&#x3D; 4.0** Display only videos in this specific privacy/privacies (optional)
     - parameter hasHLSFiles: (query) **PeerTube &gt;&#x3D; 4.0** Display only videos that have HLS files (optional)
     - parameter hasWebVideoFiles: (query) **PeerTube &gt;&#x3D; 6.0** Display only videos that have Web Video files (optional)
     - returns: RequestBuilder<[VideosForXMLInner]> 
     */
    open class func getSyndicatedSubscriptionVideosWithRequestBuilder(format: Format_getSyndicatedSubscriptionVideos, accountId: String, token: String, sort: String? = nil, nsfw: Nsfw_getSyndicatedSubscriptionVideos? = nil, isLocal: Bool? = nil, include: Include_getSyndicatedSubscriptionVideos? = nil, privacyOneOf: VideoPrivacySet? = nil, hasHLSFiles: Bool? = nil, hasWebVideoFiles: Bool? = nil) -> RequestBuilder<[VideosForXMLInner]> {
        var localVariablePath = "/feeds/subscriptions.{format}"
        let formatPreEscape = "\(format.rawValue)"
        let formatPostEscape = formatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{format}", with: formatPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "accountId": (wrappedValue: accountId.encodeToJSON(), isExplode: true),
            "token": (wrappedValue: token.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
            "nsfw": (wrappedValue: nsfw?.encodeToJSON(), isExplode: true),
            "isLocal": (wrappedValue: isLocal?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: true),
            "privacyOneOf": (wrappedValue: privacyOneOf?.encodeToJSON(), isExplode: true),
            "hasHLSFiles": (wrappedValue: hasHLSFiles?.encodeToJSON(), isExplode: true),
            "hasWebVideoFiles": (wrappedValue: hasWebVideoFiles?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[VideosForXMLInner]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter format
     */
    public enum Format_getSyndicatedVideos: String, CaseIterable {
        case xml = "xml"
        case rss = "rss"
        case rss2 = "rss2"
        case atom = "atom"
        case atom1 = "atom1"
        case json = "json"
        case json1 = "json1"
    }

    /**
     * enum for parameter nsfw
     */
    public enum Nsfw_getSyndicatedVideos: String, CaseIterable {
        case _true = "true"
        case _false = "false"
    }

    /**
     * enum for parameter include
     */
    public enum Include_getSyndicatedVideos: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _4 = 4
        case _8 = 8
    }

    /**
     Common videos feeds
     
     - parameter format: (path) format expected (we focus on making &#x60;rss&#x60; the most featureful ; it serves [Media RSS](https://www.rssboard.org/media-rss)) 
     - parameter accountId: (query) limit listing to a specific account (optional)
     - parameter accountName: (query) limit listing to a specific account (optional)
     - parameter videoChannelId: (query) limit listing to a specific video channel (optional)
     - parameter videoChannelName: (query) limit listing to a specific video channel (optional)
     - parameter sort: (query) Sort column (optional)
     - parameter nsfw: (query) whether to include nsfw videos, if any (optional)
     - parameter isLocal: (query) **PeerTube &gt;&#x3D; 4.0** Display only local or remote videos (optional)
     - parameter include: (query) **PeerTube &gt;&#x3D; 4.0** Include additional videos in results (can be combined using bitwise or operator) - &#x60;0&#x60; NONE - &#x60;1&#x60; NOT_PUBLISHED_STATE - &#x60;2&#x60; BLACKLISTED - &#x60;4&#x60; BLOCKED_OWNER - &#x60;8&#x60; FILES  (optional)
     - parameter privacyOneOf: (query) **PeerTube &gt;&#x3D; 4.0** Display only videos in this specific privacy/privacies (optional)
     - parameter hasHLSFiles: (query) **PeerTube &gt;&#x3D; 4.0** Display only videos that have HLS files (optional)
     - parameter hasWebVideoFiles: (query) **PeerTube &gt;&#x3D; 6.0** Display only videos that have Web Video files (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getSyndicatedVideos(format: Format_getSyndicatedVideos, accountId: String? = nil, accountName: String? = nil, videoChannelId: String? = nil, videoChannelName: String? = nil, sort: String? = nil, nsfw: Nsfw_getSyndicatedVideos? = nil, isLocal: Bool? = nil, include: Include_getSyndicatedVideos? = nil, privacyOneOf: VideoPrivacySet? = nil, hasHLSFiles: Bool? = nil, hasWebVideoFiles: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [VideosForXMLInner]?, _ error: Error?) -> Void)) -> RequestTask {
        return getSyndicatedVideosWithRequestBuilder(format: format, accountId: accountId, accountName: accountName, videoChannelId: videoChannelId, videoChannelName: videoChannelName, sort: sort, nsfw: nsfw, isLocal: isLocal, include: include, privacyOneOf: privacyOneOf, hasHLSFiles: hasHLSFiles, hasWebVideoFiles: hasWebVideoFiles).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Common videos feeds
     - GET /feeds/videos.{format}
     - responseHeaders: [Cache-Control(String)]
     - parameter format: (path) format expected (we focus on making &#x60;rss&#x60; the most featureful ; it serves [Media RSS](https://www.rssboard.org/media-rss)) 
     - parameter accountId: (query) limit listing to a specific account (optional)
     - parameter accountName: (query) limit listing to a specific account (optional)
     - parameter videoChannelId: (query) limit listing to a specific video channel (optional)
     - parameter videoChannelName: (query) limit listing to a specific video channel (optional)
     - parameter sort: (query) Sort column (optional)
     - parameter nsfw: (query) whether to include nsfw videos, if any (optional)
     - parameter isLocal: (query) **PeerTube &gt;&#x3D; 4.0** Display only local or remote videos (optional)
     - parameter include: (query) **PeerTube &gt;&#x3D; 4.0** Include additional videos in results (can be combined using bitwise or operator) - &#x60;0&#x60; NONE - &#x60;1&#x60; NOT_PUBLISHED_STATE - &#x60;2&#x60; BLACKLISTED - &#x60;4&#x60; BLOCKED_OWNER - &#x60;8&#x60; FILES  (optional)
     - parameter privacyOneOf: (query) **PeerTube &gt;&#x3D; 4.0** Display only videos in this specific privacy/privacies (optional)
     - parameter hasHLSFiles: (query) **PeerTube &gt;&#x3D; 4.0** Display only videos that have HLS files (optional)
     - parameter hasWebVideoFiles: (query) **PeerTube &gt;&#x3D; 6.0** Display only videos that have Web Video files (optional)
     - returns: RequestBuilder<[VideosForXMLInner]> 
     */
    open class func getSyndicatedVideosWithRequestBuilder(format: Format_getSyndicatedVideos, accountId: String? = nil, accountName: String? = nil, videoChannelId: String? = nil, videoChannelName: String? = nil, sort: String? = nil, nsfw: Nsfw_getSyndicatedVideos? = nil, isLocal: Bool? = nil, include: Include_getSyndicatedVideos? = nil, privacyOneOf: VideoPrivacySet? = nil, hasHLSFiles: Bool? = nil, hasWebVideoFiles: Bool? = nil) -> RequestBuilder<[VideosForXMLInner]> {
        var localVariablePath = "/feeds/videos.{format}"
        let formatPreEscape = "\(format.rawValue)"
        let formatPostEscape = formatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{format}", with: formatPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "accountId": (wrappedValue: accountId?.encodeToJSON(), isExplode: true),
            "accountName": (wrappedValue: accountName?.encodeToJSON(), isExplode: true),
            "videoChannelId": (wrappedValue: videoChannelId?.encodeToJSON(), isExplode: true),
            "videoChannelName": (wrappedValue: videoChannelName?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
            "nsfw": (wrappedValue: nsfw?.encodeToJSON(), isExplode: true),
            "isLocal": (wrappedValue: isLocal?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: true),
            "privacyOneOf": (wrappedValue: privacyOneOf?.encodeToJSON(), isExplode: true),
            "hasHLSFiles": (wrappedValue: hasHLSFiles?.encodeToJSON(), isExplode: true),
            "hasWebVideoFiles": (wrappedValue: hasWebVideoFiles?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[VideosForXMLInner]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Videos podcast feed
     
     - parameter videoChannelId: (query) Limit listing to a specific video channel 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getVideosPodcastFeed(videoChannelId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getVideosPodcastFeedWithRequestBuilder(videoChannelId: videoChannelId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Videos podcast feed
     - GET /feeds/podcast/videos.xml
     - responseHeaders: [Cache-Control(String)]
     - parameter videoChannelId: (query) Limit listing to a specific video channel 
     - returns: RequestBuilder<Void> 
     */
    open class func getVideosPodcastFeedWithRequestBuilder(videoChannelId: String) -> RequestBuilder<Void> {
        let localVariablePath = "/feeds/podcast/videos.xml"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "videoChannelId": (wrappedValue: videoChannelId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
