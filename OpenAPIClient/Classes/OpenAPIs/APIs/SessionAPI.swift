//
// SessionAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SessionAPI {

    /**
     Login prerequisite
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getOAuthClient(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OAuthClient?, _ error: Error?) -> Void)) -> RequestTask {
        return getOAuthClientWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Login prerequisite
     - GET /api/v1/oauth-clients/local
     - You need to retrieve a client id and secret before [logging in](#operation/getOAuthToken).
     - returns: RequestBuilder<OAuthClient> 
     */
    open class func getOAuthClientWithRequestBuilder() -> RequestBuilder<OAuthClient> {
        let localVariablePath = "/api/v1/oauth-clients/local"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuthClient>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter grantType
     */
    public enum GrantType_getOAuthToken: String, CaseIterable {
        case password = "password"
        case refreshToken = "refresh_token"
    }

    /**
     Login
     
     - parameter clientId: (form)  (optional)
     - parameter clientSecret: (form)  (optional)
     - parameter grantType: (form)  (optional, default to .password)
     - parameter username: (form) immutable name of the user, used to find or mention its actor (optional)
     - parameter password: (form)  (optional)
     - parameter refreshToken: (form)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getOAuthToken(clientId: String? = nil, clientSecret: String? = nil, grantType: GrantType_getOAuthToken? = nil, username: String? = nil, password: String? = nil, refreshToken: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetOAuthToken200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getOAuthTokenWithRequestBuilder(clientId: clientId, clientSecret: clientSecret, grantType: grantType, username: username, password: password, refreshToken: refreshToken).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Login
     - POST /api/v1/users/token
     - With your [client id and secret](#operation/getOAuthClient), you can retrieve an access and refresh tokens.
     - parameter clientId: (form)  (optional)
     - parameter clientSecret: (form)  (optional)
     - parameter grantType: (form)  (optional, default to .password)
     - parameter username: (form) immutable name of the user, used to find or mention its actor (optional)
     - parameter password: (form)  (optional)
     - parameter refreshToken: (form)  (optional)
     - returns: RequestBuilder<GetOAuthToken200Response> 
     */
    open class func getOAuthTokenWithRequestBuilder(clientId: String? = nil, clientSecret: String? = nil, grantType: GrantType_getOAuthToken? = nil, username: String? = nil, password: String? = nil, refreshToken: String? = nil) -> RequestBuilder<GetOAuthToken200Response> {
        let localVariablePath = "/api/v1/users/token"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "client_id": clientId?.encodeToJSON(),
            "client_secret": clientSecret?.encodeToJSON(),
            "grant_type": grantType?.encodeToJSON(),
            "username": username?.encodeToJSON(),
            "password": password?.encodeToJSON(),
            "refresh_token": refreshToken?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetOAuthToken200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Logout
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func revokeOAuthToken(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return revokeOAuthTokenWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Logout
     - POST /api/v1/users/revoke-token
     - Revokes your access token and its associated refresh token, destroying your current session.
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - returns: RequestBuilder<Void> 
     */
    open class func revokeOAuthTokenWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/api/v1/users/revoke-token"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
