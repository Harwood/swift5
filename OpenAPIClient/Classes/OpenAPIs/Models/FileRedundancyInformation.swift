//
// FileRedundancyInformation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct FileRedundancyInformation: Codable, JSONEncodable, Hashable {

    public enum Strategy: String, Codable, CaseIterable {
        case manual = "manual"
        case mostViews = "most-views"
        case trending = "trending"
        case recentlyAdded = "recently-added"
    }
    static let idRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public var id: Int?
    public var fileUrl: String?
    public var strategy: Strategy?
    public var size: Int?
    public var createdAt: Date?
    public var updatedAt: Date?
    public var expiresOn: Date?

    public init(id: Int? = nil, fileUrl: String? = nil, strategy: Strategy? = nil, size: Int? = nil, createdAt: Date? = nil, updatedAt: Date? = nil, expiresOn: Date? = nil) {
        self.id = id
        self.fileUrl = fileUrl
        self.strategy = strategy
        self.size = size
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.expiresOn = expiresOn
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case fileUrl
        case strategy
        case size
        case createdAt
        case updatedAt
        case expiresOn
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(fileUrl, forKey: .fileUrl)
        try container.encodeIfPresent(strategy, forKey: .strategy)
        try container.encodeIfPresent(size, forKey: .size)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(expiresOn, forKey: .expiresOn)
    }
}

