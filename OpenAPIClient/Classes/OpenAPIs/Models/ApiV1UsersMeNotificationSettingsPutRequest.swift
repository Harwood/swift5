//
// ApiV1UsersMeNotificationSettingsPutRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ApiV1UsersMeNotificationSettingsPutRequest: Codable, JSONEncodable, Hashable {

    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var newVideoFromSubscription: Int?
    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var newCommentOnMyVideo: Int?
    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var abuseAsModerator: Int?
    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var videoAutoBlacklistAsModerator: Int?
    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var blacklistOnMyVideo: Int?
    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var myVideoPublished: Int?
    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var myVideoImportFinished: Int?
    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var newFollow: Int?
    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var newUserRegistration: Int?
    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var commentMention: Int?
    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var newInstanceFollower: Int?
    /** Notification type. One of the following values, or a sum of multiple values: - `0` NONE - `1` WEB - `2` EMAIL  */
    public var autoInstanceFollowing: Int?

    public init(newVideoFromSubscription: Int? = nil, newCommentOnMyVideo: Int? = nil, abuseAsModerator: Int? = nil, videoAutoBlacklistAsModerator: Int? = nil, blacklistOnMyVideo: Int? = nil, myVideoPublished: Int? = nil, myVideoImportFinished: Int? = nil, newFollow: Int? = nil, newUserRegistration: Int? = nil, commentMention: Int? = nil, newInstanceFollower: Int? = nil, autoInstanceFollowing: Int? = nil) {
        self.newVideoFromSubscription = newVideoFromSubscription
        self.newCommentOnMyVideo = newCommentOnMyVideo
        self.abuseAsModerator = abuseAsModerator
        self.videoAutoBlacklistAsModerator = videoAutoBlacklistAsModerator
        self.blacklistOnMyVideo = blacklistOnMyVideo
        self.myVideoPublished = myVideoPublished
        self.myVideoImportFinished = myVideoImportFinished
        self.newFollow = newFollow
        self.newUserRegistration = newUserRegistration
        self.commentMention = commentMention
        self.newInstanceFollower = newInstanceFollower
        self.autoInstanceFollowing = autoInstanceFollowing
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case newVideoFromSubscription
        case newCommentOnMyVideo
        case abuseAsModerator
        case videoAutoBlacklistAsModerator
        case blacklistOnMyVideo
        case myVideoPublished
        case myVideoImportFinished
        case newFollow
        case newUserRegistration
        case commentMention
        case newInstanceFollower
        case autoInstanceFollowing
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(newVideoFromSubscription, forKey: .newVideoFromSubscription)
        try container.encodeIfPresent(newCommentOnMyVideo, forKey: .newCommentOnMyVideo)
        try container.encodeIfPresent(abuseAsModerator, forKey: .abuseAsModerator)
        try container.encodeIfPresent(videoAutoBlacklistAsModerator, forKey: .videoAutoBlacklistAsModerator)
        try container.encodeIfPresent(blacklistOnMyVideo, forKey: .blacklistOnMyVideo)
        try container.encodeIfPresent(myVideoPublished, forKey: .myVideoPublished)
        try container.encodeIfPresent(myVideoImportFinished, forKey: .myVideoImportFinished)
        try container.encodeIfPresent(newFollow, forKey: .newFollow)
        try container.encodeIfPresent(newUserRegistration, forKey: .newUserRegistration)
        try container.encodeIfPresent(commentMention, forKey: .commentMention)
        try container.encodeIfPresent(newInstanceFollower, forKey: .newInstanceFollower)
        try container.encodeIfPresent(autoInstanceFollowing, forKey: .autoInstanceFollowing)
    }
}

